{
  "address": "0xC9021D9C5956674A2E58504901a07a701845651C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGaslimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Lottery__LotteryNotOpen",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Lottery__UpkeepNotNeededYet",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TX_NOT_SUCCESSFULL",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "EnterLottery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winneraddress",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getlotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xff1e8aba51242ebc252f33519ef06f8c8fea88c46e54b490712dc382e1daf73c",
  "receipt": {
    "to": null,
    "from": "0xF2A1790753821528E7958Bdcb196Ab12949F93A7",
    "contractAddress": "0xC9021D9C5956674A2E58504901a07a701845651C",
    "transactionIndex": 85,
    "gasUsed": "1351268",
    "logsBloom": "0x
    "blockHash": "0x88224fa5461bd59fa9300f0900bc404164ce991558d520b059ac1580830ce07a",
    "transactionHash": "0xff1e8aba51242ebc252f33519ef06f8c8fea88c46e54b490712dc382e1daf73c",
    "logs": [],
    "blockNumber": 8129061,
    "cumulativeGasUsed": "16037698",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "6926",
    "500000",
    "30"
  ],
  "numDeployments": 2,
  "solcInputHash": "8081591cf37dd5f4f5ab861a9f9bfeda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGaslimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Lottery__LotteryNotOpen\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Lottery__UpkeepNotNeededYet\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TX_NOT_SUCCESSFULL\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"EnterLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winneraddress\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between Lottery runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"},\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n//Custom errors\\nerror TX_NOT_SUCCESSFULL();\\nerror Lottery__UpkeepNotNeededYet(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\nerror NotEnoughEth();\\nerror Lottery__TransferFailed();\\nerror Lottery__LotteryNotOpen();\\nerror Lottery__SendMoreToEnterLottery();\\n\\ncontract Lottery is VRFConsumerBaseV2 {\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    // Lottery Variables\\n    address public manager;\\n    address payable[] public players;\\n    address payable recent_winner;\\n    LotteryState private s_lotteryState;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n    uint private immutable i_interval;\\n    // Chainlink VRF Variables\\n    bytes32 private immutable i_gaslane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 constant REQUEST_CONFORMATIONS = 3;\\n    uint32 private immutable i_callbackGaslimit;\\n    uint32 private constant NUM_WORDS = 1;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    //Events\\n    event EnterLottery(address indexed player);\\n    event RequestedLotteryWinner(uint256 requestId);\\n    event WinnerPicked(address indexed winneraddress);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        bytes32 keyhash,\\n        uint64 subscriptionId,\\n        uint32 callbackGaslimit,\\n        uint interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        manager = msg.sender;\\n        i_gaslane = keyhash;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGaslimit = callbackGaslimit;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_interval = interval;\\n    }\\n\\n    modifier restricted() {\\n        require(msg.sender == manager);\\n        _;\\n    }\\n\\n    function enter() public payable {\\n        require(msg.value > .001 ether); //For validation\\n        if (s_lotteryState != LotteryState.OPEN) {\\n            revert Lottery__LotteryNotOpen();\\n        }\\n        players.push(payable(msg.sender));\\n        emit EnterLottery(msg.sender);\\n    }\\n\\n    //Using chainlinkVRFv2 to generate truly random number\\n    /*   function requestRandomWinner() external {\\n        //Request the random number\\n        // Once we get it, do something with it\\n        // 2 transaction process\\n        uint256 winnerid = i_vrfCoordinator.requestRandomWords(\\n            i_gaslane,\\n            i_subscriptionId,\\n            REQUEST_CONFORMATIONS,\\n            i_callbackGaslimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedLotteryWinner(winnerid);\\n\\n         */ // (bool succes,)=\\n    // }\\n\\n    // function random() private view returns (uint) {\\n    //     return\\n    //         uint(\\n    //             keccak256(\\n    //                 abi.encodePacked(block.difficulty, block.timestamp, players)\\n    //             )\\n    //         );\\n    // }\\n\\n    function fulfillRandomWords(\\n        uint256 /* requestId */,\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        uint256 indexofwinner = _randomWords[0] % players.length;\\n        address payable recentWinner = players[indexofwinner];\\n        recent_winner = recentWinner;\\n        players = new address payable[](0);\\n        s_lotteryState = LotteryState.OPEN;\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recent_winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) revert TX_NOT_SUCCESSFULL();\\n        emit WinnerPicked(recent_winner);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between Lottery runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    ) public view returns (bool upkeepNeeded, bytes memory /* performData */) {\\n        bool isOpen = LotteryState.OPEN == s_lotteryState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n        return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     */\\n    function performUpkeep(bytes calldata /* performData */) external {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Lottery__UpkeepNotNeededYet(\\n                address(this).balance,\\n                players.length,\\n                uint256(s_lotteryState)\\n            );\\n        }\\n        s_lotteryState = LotteryState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gaslane,\\n            i_subscriptionId,\\n            REQUEST_CONFORMATIONS,\\n            i_callbackGaslimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedLotteryWinner(requestId);\\n    }\\n\\n    /* function pickWinner() public payable restricted returns (uint) {\\n        uint index = random() % players.length;\\n        players[index].transfer(address(this).balance);\\n        players = new address payable[](0);\\n        return (index);\\n    } */\\n\\n    //The function pickWinner is replaced by performUpKeep()\\n\\n    function getPlayers() public view returns (address payable[] memory) {\\n        return players;\\n    }\\n\\n    function getlotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFORMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return players[index];\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return players.length;\\n    }\\n}\\n\",\"keccak256\":\"0xe67a5f8563f272967da51e8b481fb3effe25484da3232a313dab4d15c8136fdf\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b5060405162001a6838038062001a68833981810160405281019062000038919062000295565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250508060a0818152505050505050506200031d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001618262000134565b9050919050565b620001738162000154565b81146200017f57600080fd5b50565b600081519050620001938162000168565b92915050565b6000819050919050565b620001ae8162000199565b8114620001ba57600080fd5b50565b600081519050620001ce81620001a3565b92915050565b600067ffffffffffffffff82169050919050565b620001f381620001d4565b8114620001ff57600080fd5b50565b6000815190506200021381620001e8565b92915050565b600063ffffffff82169050919050565b620002348162000219565b81146200024057600080fd5b50565b600081519050620002548162000229565b92915050565b6000819050919050565b6200026f816200025a565b81146200027b57600080fd5b50565b6000815190506200028f8162000264565b92915050565b600080600080600060a08688031215620002b457620002b36200012f565b5b6000620002c48882890162000182565b9550506020620002d788828901620001bd565b9450506040620002ea8882890162000202565b9350506060620002fd8882890162000243565b925050608062000310888289016200027e565b9150509295509295909350565b60805160a05160c05160e05161010051610120516116ed6200037b600039600061051301526000610593015260006105700152600061054f015260008181610703015261083a01526000818161038601526103da01526116ed6000f3fe6080604052600436106100e85760003560e01c80636e04ff0d1161008a578063e55ae4e811610059578063e55ae4e8146102d5578063e97dcb6214610312578063f71d96cb1461031c578063fd6673f514610359576100e8565b80636e04ff0d146102165780638b5b9ccc1461025457806391ad27b41461027f578063c1c244e8146102aa576100e8565b8063473f1ddc116100c6578063473f1ddc1461016a578063481c6a751461019557806353a2c19a146101c05780635f1b0fd8146101eb576100e8565b80631fe543e3146100ed57806329c0d4fc146101165780634585e33b14610141575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610ee5565b610384565b005b34801561012257600080fd5b5061012b610444565b6040516101389190610fb8565b60405180910390f35b34801561014d57600080fd5b506101686004803603810190610163919061102e565b61045b565b005b34801561017657600080fd5b5061017f610656565b60405161018c91906110bc565b60405180910390f35b3480156101a157600080fd5b506101aa610680565b6040516101b791906110bc565b60405180910390f35b3480156101cc57600080fd5b506101d56106a4565b6040516101e291906110e6565b60405180910390f35b3480156101f757600080fd5b506102006106b3565b60405161020d91906110e6565b60405180910390f35b34801561022257600080fd5b5061023d600480360381019061023891906111b6565b6106c0565b60405161024b929190611299565b60405180910390f35b34801561026057600080fd5b506102696107a8565b6040516102769190611399565b60405180910390f35b34801561028b57600080fd5b50610294610836565b6040516102a191906110e6565b60405180910390f35b3480156102b657600080fd5b506102bf61085e565b6040516102cc91906110e6565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f791906113bb565b610868565b60405161030991906110bc565b60405180910390f35b61031a6108b0565b005b34801561032857600080fd5b50610343600480360381019061033e91906113bb565b6109d8565b60405161035091906113f7565b60405180910390f35b34801561036557600080fd5b5061036e610a17565b60405161037b91906110e6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042d929190611412565b60405180910390fd5b6104408282610a24565b5050565b6000600260149054906101000a900460ff16905090565b6000610475604051806020016040528060008152506106c0565b509050806104e45747600180549050600260149054906101000a900460ff1660018111156104a6576104a5610f41565b5b6040517fcaa1756a0000000000000000000000000000000000000000000000000000000081526004016104db9392919061143b565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561050a57610509610f41565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105d49594939291906114ea565b6020604051808303816000875af11580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106179190611552565b90507febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c8160405161064891906110e6565b60405180910390a150505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff1660018111156106e8576106e7610f41565b5b600060018111156106fc576106fb610f41565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006003544261073091906115ae565b119050600080600180549050119050600080471190508280156107505750835b80156107595750805b80156107625750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6060600180548060200260200160405190810160405280929190818152602001828054801561082c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107e2575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b60006001828154811061087e5761087d6115e2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b66038d7ea4c6800034116108c357600080fd5b600060018111156108d7576108d6610f41565b5b600260149054906101000a900460ff1660018111156108f9576108f8610f41565b5b14610930576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b600181815481106109e857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600180549050905090565b600060018054905082600081518110610a4057610a3f6115e2565b5b6020026020010151610a529190611640565b9050600060018281548110610a6a57610a696115e2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610af357610af2610da2565b5b604051908082528060200260200182016040528015610b215781602001602082028036833780820191505090505b5060019080519060200190610b37929190610c9b565b506000600260146101000a81548160ff02191690836001811115610b5e57610b5d610f41565b5b0217905550426003819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610bb2906116a2565b60006040518083038185875af1925050503d8060008114610bef576040519150601f19603f3d011682016040523d82523d6000602084013e610bf4565b606091505b5050905080610c2f576040517fb321456900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d14579160200282015b82811115610d135782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cbb565b5b509050610d219190610d25565b5090565b5b80821115610d3e576000816000905550600101610d26565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610d6981610d56565b8114610d7457600080fd5b50565b600081359050610d8681610d60565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dda82610d91565b810181811067ffffffffffffffff82111715610df957610df8610da2565b5b80604052505050565b6000610e0c610d42565b9050610e188282610dd1565b919050565b600067ffffffffffffffff821115610e3857610e37610da2565b5b602082029050602081019050919050565b600080fd5b6000610e61610e5c84610e1d565b610e02565b90508083825260208201905060208402830185811115610e8457610e83610e49565b5b835b81811015610ead5780610e998882610d77565b845260208401935050602081019050610e86565b5050509392505050565b600082601f830112610ecc57610ecb610d8c565b5b8135610edc848260208601610e4e565b91505092915050565b60008060408385031215610efc57610efb610d4c565b5b6000610f0a85828601610d77565b925050602083013567ffffffffffffffff811115610f2b57610f2a610d51565b5b610f3785828601610eb7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f8157610f80610f41565b5b50565b6000819050610f9282610f70565b919050565b6000610fa282610f84565b9050919050565b610fb281610f97565b82525050565b6000602082019050610fcd6000830184610fa9565b92915050565b600080fd5b60008083601f840112610fee57610fed610d8c565b5b8235905067ffffffffffffffff81111561100b5761100a610fd3565b5b60208301915083600182028301111561102757611026610e49565b5b9250929050565b6000806020838503121561104557611044610d4c565b5b600083013567ffffffffffffffff81111561106357611062610d51565b5b61106f85828601610fd8565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110a68261107b565b9050919050565b6110b68161109b565b82525050565b60006020820190506110d160008301846110ad565b92915050565b6110e081610d56565b82525050565b60006020820190506110fb60008301846110d7565b92915050565b600080fd5b600067ffffffffffffffff82111561112157611120610da2565b5b61112a82610d91565b9050602081019050919050565b82818337600083830152505050565b600061115961115484611106565b610e02565b90508281526020810184848401111561117557611174611101565b5b611180848285611137565b509392505050565b600082601f83011261119d5761119c610d8c565b5b81356111ad848260208601611146565b91505092915050565b6000602082840312156111cc576111cb610d4c565b5b600082013567ffffffffffffffff8111156111ea576111e9610d51565b5b6111f684828501611188565b91505092915050565b60008115159050919050565b611214816111ff565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611254578082015181840152602081019050611239565b60008484015250505050565b600061126b8261121a565b6112758185611225565b9350611285818560208601611236565b61128e81610d91565b840191505092915050565b60006040820190506112ae600083018561120b565b81810360208301526112c08184611260565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006113008261107b565b9050919050565b611310816112f5565b82525050565b60006113228383611307565b60208301905092915050565b6000602082019050919050565b6000611346826112c9565b61135081856112d4565b935061135b836112e5565b8060005b8381101561138c5781516113738882611316565b975061137e8361132e565b92505060018101905061135f565b5085935050505092915050565b600060208201905081810360008301526113b3818461133b565b905092915050565b6000602082840312156113d1576113d0610d4c565b5b60006113df84828501610d77565b91505092915050565b6113f1816112f5565b82525050565b600060208201905061140c60008301846113e8565b92915050565b600060408201905061142760008301856110ad565b61143460208301846110ad565b9392505050565b600060608201905061145060008301866110d7565b61145d60208301856110d7565b61146a60408301846110d7565b949350505050565b6000819050919050565b61148581611472565b82525050565b600067ffffffffffffffff82169050919050565b6114a88161148b565b82525050565b600061ffff82169050919050565b6114c5816114ae565b82525050565b600063ffffffff82169050919050565b6114e4816114cb565b82525050565b600060a0820190506114ff600083018861147c565b61150c602083018761149f565b61151960408301866114bc565b61152660608301856114db565b61153360808301846114db565b9695505050505050565b60008151905061154c81610d60565b92915050565b60006020828403121561156857611567610d4c565b5b60006115768482850161153d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115b982610d56565b91506115c483610d56565b92508282039050818111156115dc576115db61157f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061164b82610d56565b915061165683610d56565b92508261166657611665611611565b5b828206905092915050565b600081905092915050565b50565b600061168c600083611671565b91506116978261167c565b600082019050919050565b60006116ad8261167f565b915081905091905056fea26469706673582212207e555726dae1a4080a78aa9c1523546509dcd174dc07a7ef455a848b6283b65d64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80636e04ff0d1161008a578063e55ae4e811610059578063e55ae4e8146102d5578063e97dcb6214610312578063f71d96cb1461031c578063fd6673f514610359576100e8565b80636e04ff0d146102165780638b5b9ccc1461025457806391ad27b41461027f578063c1c244e8146102aa576100e8565b8063473f1ddc116100c6578063473f1ddc1461016a578063481c6a751461019557806353a2c19a146101c05780635f1b0fd8146101eb576100e8565b80631fe543e3146100ed57806329c0d4fc146101165780634585e33b14610141575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610ee5565b610384565b005b34801561012257600080fd5b5061012b610444565b6040516101389190610fb8565b60405180910390f35b34801561014d57600080fd5b506101686004803603810190610163919061102e565b61045b565b005b34801561017657600080fd5b5061017f610656565b60405161018c91906110bc565b60405180910390f35b3480156101a157600080fd5b506101aa610680565b6040516101b791906110bc565b60405180910390f35b3480156101cc57600080fd5b506101d56106a4565b6040516101e291906110e6565b60405180910390f35b3480156101f757600080fd5b506102006106b3565b60405161020d91906110e6565b60405180910390f35b34801561022257600080fd5b5061023d600480360381019061023891906111b6565b6106c0565b60405161024b929190611299565b60405180910390f35b34801561026057600080fd5b506102696107a8565b6040516102769190611399565b60405180910390f35b34801561028b57600080fd5b50610294610836565b6040516102a191906110e6565b60405180910390f35b3480156102b657600080fd5b506102bf61085e565b6040516102cc91906110e6565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f791906113bb565b610868565b60405161030991906110bc565b60405180910390f35b61031a6108b0565b005b34801561032857600080fd5b50610343600480360381019061033e91906113bb565b6109d8565b60405161035091906113f7565b60405180910390f35b34801561036557600080fd5b5061036e610a17565b60405161037b91906110e6565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042d929190611412565b60405180910390fd5b6104408282610a24565b5050565b6000600260149054906101000a900460ff16905090565b6000610475604051806020016040528060008152506106c0565b509050806104e45747600180549050600260149054906101000a900460ff1660018111156104a6576104a5610f41565b5b6040517fcaa1756a0000000000000000000000000000000000000000000000000000000081526004016104db9392919061143b565b60405180910390fd5b6001600260146101000a81548160ff0219169083600181111561050a57610509610f41565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016105d49594939291906114ea565b6020604051808303816000875af11580156105f3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106179190611552565b90507febf56642252004c18a776f30d528e7a0ce8c5db14b6596fb6550f630c8a24c6c8160405161064891906110e6565b60405180910390a150505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff1660018111156106e8576106e7610f41565b5b600060018111156106fc576106fb610f41565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006003544261073091906115ae565b119050600080600180549050119050600080471190508280156107505750835b80156107595750805b80156107625750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b6060600180548060200260200160405190810160405280929190818152602001828054801561082c57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116107e2575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b60006001828154811061087e5761087d6115e2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b66038d7ea4c6800034116108c357600080fd5b600060018111156108d7576108d6610f41565b5b600260149054906101000a900460ff1660018111156108f9576108f8610f41565b5b14610930576040517f823ea8bb00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b600181815481106109e857600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600180549050905090565b600060018054905082600081518110610a4057610a3f6115e2565b5b6020026020010151610a529190611640565b9050600060018281548110610a6a57610a696115e2565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff811115610af357610af2610da2565b5b604051908082528060200260200182016040528015610b215781602001602082028036833780820191505090505b5060019080519060200190610b37929190610c9b565b506000600260146101000a81548160ff02191690836001811115610b5e57610b5d610f41565b5b0217905550426003819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610bb2906116a2565b60006040518083038185875af1925050503d8060008114610bef576040519150601f19603f3d011682016040523d82523d6000602084013e610bf4565b606091505b5050905080610c2f576040517fb321456900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610d14579160200282015b82811115610d135782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610cbb565b5b509050610d219190610d25565b5090565b5b80821115610d3e576000816000905550600101610d26565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610d6981610d56565b8114610d7457600080fd5b50565b600081359050610d8681610d60565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610dda82610d91565b810181811067ffffffffffffffff82111715610df957610df8610da2565b5b80604052505050565b6000610e0c610d42565b9050610e188282610dd1565b919050565b600067ffffffffffffffff821115610e3857610e37610da2565b5b602082029050602081019050919050565b600080fd5b6000610e61610e5c84610e1d565b610e02565b90508083825260208201905060208402830185811115610e8457610e83610e49565b5b835b81811015610ead5780610e998882610d77565b845260208401935050602081019050610e86565b5050509392505050565b600082601f830112610ecc57610ecb610d8c565b5b8135610edc848260208601610e4e565b91505092915050565b60008060408385031215610efc57610efb610d4c565b5b6000610f0a85828601610d77565b925050602083013567ffffffffffffffff811115610f2b57610f2a610d51565b5b610f3785828601610eb7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610f8157610f80610f41565b5b50565b6000819050610f9282610f70565b919050565b6000610fa282610f84565b9050919050565b610fb281610f97565b82525050565b6000602082019050610fcd6000830184610fa9565b92915050565b600080fd5b60008083601f840112610fee57610fed610d8c565b5b8235905067ffffffffffffffff81111561100b5761100a610fd3565b5b60208301915083600182028301111561102757611026610e49565b5b9250929050565b6000806020838503121561104557611044610d4c565b5b600083013567ffffffffffffffff81111561106357611062610d51565b5b61106f85828601610fd8565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006110a68261107b565b9050919050565b6110b68161109b565b82525050565b60006020820190506110d160008301846110ad565b92915050565b6110e081610d56565b82525050565b60006020820190506110fb60008301846110d7565b92915050565b600080fd5b600067ffffffffffffffff82111561112157611120610da2565b5b61112a82610d91565b9050602081019050919050565b82818337600083830152505050565b600061115961115484611106565b610e02565b90508281526020810184848401111561117557611174611101565b5b611180848285611137565b509392505050565b600082601f83011261119d5761119c610d8c565b5b81356111ad848260208601611146565b91505092915050565b6000602082840312156111cc576111cb610d4c565b5b600082013567ffffffffffffffff8111156111ea576111e9610d51565b5b6111f684828501611188565b91505092915050565b60008115159050919050565b611214816111ff565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b83811015611254578082015181840152602081019050611239565b60008484015250505050565b600061126b8261121a565b6112758185611225565b9350611285818560208601611236565b61128e81610d91565b840191505092915050565b60006040820190506112ae600083018561120b565b81810360208301526112c08184611260565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b60006113008261107b565b9050919050565b611310816112f5565b82525050565b60006113228383611307565b60208301905092915050565b6000602082019050919050565b6000611346826112c9565b61135081856112d4565b935061135b836112e5565b8060005b8381101561138c5781516113738882611316565b975061137e8361132e565b92505060018101905061135f565b5085935050505092915050565b600060208201905081810360008301526113b3818461133b565b905092915050565b6000602082840312156113d1576113d0610d4c565b5b60006113df84828501610d77565b91505092915050565b6113f1816112f5565b82525050565b600060208201905061140c60008301846113e8565b92915050565b600060408201905061142760008301856110ad565b61143460208301846110ad565b9392505050565b600060608201905061145060008301866110d7565b61145d60208301856110d7565b61146a60408301846110d7565b949350505050565b6000819050919050565b61148581611472565b82525050565b600067ffffffffffffffff82169050919050565b6114a88161148b565b82525050565b600061ffff82169050919050565b6114c5816114ae565b82525050565b600063ffffffff82169050919050565b6114e4816114cb565b82525050565b600060a0820190506114ff600083018861147c565b61150c602083018761149f565b61151960408301866114bc565b61152660608301856114db565b61153360808301846114db565b9695505050505050565b60008151905061154c81610d60565b92915050565b60006020828403121561156857611567610d4c565b5b60006115768482850161153d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006115b982610d56565b91506115c483610d56565b92508282039050818111156115dc576115db61157f565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061164b82610d56565b915061165683610d56565b92508261166657611665611611565b5b828206905092915050565b600081905092915050565b50565b600061168c600083611671565b91506116978261167c565b600082019050919050565b60006116ad8261167f565b915081905091905056fea26469706673582212207e555726dae1a4080a78aa9c1523546509dcd174dc07a7ef455a848b6283b65d64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between Lottery runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      },
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 242,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "manager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 245,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 247,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "recent_winner",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 250,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(LotteryState)240"
      },
      {
        "astId": 252,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 254,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)240": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}