{
  "address": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "keyhash",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGaslimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TX_NOT_SUCCESSFULL",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "EnterLottery",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedLotteryWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winneraddress",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enter",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPlayers",
      "outputs": [
        {
          "internalType": "address payable[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getlotteryState",
      "outputs": [
        {
          "internalType": "enum Lottery.LotteryState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x738fd6adc50b124ae4bbbb4cc0a8b16bec1fef23c46c7bc654e3b6b2e9f189ca",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xCf7Ed3AccA5a467e9e704C703E8D87F634fB0Fc9",
    "transactionIndex": 0,
    "gasUsed": "1286713",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x69b1c5a52aa06176c6d23ed6ab17f2a615f18644b648921034095dbcb3071ccd",
    "transactionHash": "0x738fd6adc50b124ae4bbbb4cc0a8b16bec1fef23c46c7bc654e3b6b2e9f189ca",
    "logs": [],
    "blockNumber": 4,
    "cumulativeGasUsed": "1286713",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "1",
    "500000",
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "d363e3ded5a436a18c0ed7da4bc45b8a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"keyhash\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGaslimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TX_NOT_SUCCESSFULL\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"EnterLottery\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedLotteryWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winneraddress\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enter\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPlayers\",\"outputs\":[{\"internalType\":\"address payable[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getlotteryState\",\"outputs\":[{\"internalType\":\"enum Lottery.LotteryState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK.\"},\"performUpkeep(bytes)\":{\"details\":\"Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lottery.sol\":\"Lottery\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/AutomationBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract AutomationBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5d354afa1a97dffe66094397cdcbb0c14713cf3d609d88fd8f9891010e9a351a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./AutomationBase.sol\\\";\\nimport \\\"./interfaces/AutomationCompatibleInterface.sol\\\";\\n\\nabstract contract AutomationCompatible is AutomationBase, AutomationCompatibleInterface {}\\n\",\"keccak256\":\"0x40e5ae0eff4edd0740c1b5590d09c344f84dee031e82d5294563e99603774f80\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n\\n  /*\\n   * @notice Check to see if there exists a request commitment consumers\\n   * for all consumers and keyhashes for a given sub.\\n   * @param subId - ID of the subscription\\n   * @return true if there exists at least one unfulfilled request for the subscription, false\\n   * otherwise.\\n   */\\n  function pendingRequestExists(uint64 subId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x54cdc97717cbae1a51a5500c8ee4875ebf056c95b54d2155a9544a79cb4f4494\",\"license\":\"MIT\"},\"contracts/Lottery.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/AutomationCompatible.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\n//Custom errors\\n    error TX_NOT_SUCCESSFULL();\\n    error LOTTERY_UpkeepNotNeededYet(uint bal,uint num,uint state);\\n    error NotEnoughEth();\\ncontract Lottery is VRFConsumerBaseV2 {\\n    enum LotteryState {\\n        OPEN,\\n        CALCULATING\\n    }\\n    // Lottery Variables\\n    address public manager;\\n    address payable[] public players;\\n    address payable recent_winner;\\n    LotteryState private s_lotteryState;\\n    uint256 private s_lastTimeStamp;\\n    address private s_recentWinner;\\n    uint private immutable i_interval;\\n    // Chainlink VRF Variables\\n    bytes32 private immutable i_gaslane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 constant REQUEST_CONFORMATIONS = 3;\\n    uint32 private immutable i_callbackGaslimit;\\n    uint32 private constant NUM_WORDS = 1;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    //Events\\n    event EnterLottery(address indexed player);\\n    event RequestedLotteryWinner(uint256 requestId);\\n    event WinnerPicked(address indexed winneraddress);\\n    event RequestedRaffleWinner(uint requestId);\\n\\n    constructor(\\n        address vrfCoordinatorV2,\\n        bytes32 keyhash,\\n        uint64 subscriptionId,\\n        uint32 callbackGaslimit,\\n        uint interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        manager = msg.sender;\\n        i_gaslane = keyhash;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGaslimit = callbackGaslimit;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_interval=interval;\\n    }\\n    modifier restricted() {\\n        require(msg.sender == manager);\\n        _;\\n    }\\n\\n    function enter() public payable {\\n        require(msg.value > .001 ether); //For validation\\n        players.push(payable(msg.sender));\\n        emit EnterLottery(msg.sender);\\n    }\\n\\n    //Using chainlinkVRFv2 to generate truly random number\\n  /*   function requestRandomWinner() external {\\n        //Request the random number\\n        // Once we get it, do something with it\\n        // 2 transaction process\\n        uint256 winnerid = i_vrfCoordinator.requestRandomWords(\\n            i_gaslane,\\n            i_subscriptionId,\\n            REQUEST_CONFORMATIONS,\\n            i_callbackGaslimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedLotteryWinner(winnerid);\\n\\n         */// (bool succes,)=\\n    // }\\n\\n    // function random() private view returns (uint) {\\n    //     return\\n    //         uint(\\n    //             keccak256(\\n    //                 abi.encodePacked(block.difficulty, block.timestamp, players)\\n    //             )\\n    //         );\\n    // }\\n\\n    function fulfillRandomWords(\\n        uint256, /* requestId */\\n        uint256[] memory _randomWords\\n    ) internal override {\\n        uint256 indexofwinner = _randomWords[0] % players.length;\\n        address payable recentWinner = players[indexofwinner];\\n        recent_winner = recentWinner;\\n        players= new address payable[](0);\\n        s_lotteryState=LotteryState.OPEN;\\n        s_lastTimeStamp=block.timestamp;\\n        (bool success, ) = recent_winner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) revert TX_NOT_SUCCESSFULL();\\n        emit WinnerPicked(recent_winner);\\n    }\\n\\n    /**\\n     * @dev This is the function that the Chainlink Keeper nodes call\\n     * they look for `upkeepNeeded` to return True.\\n     * the following should be true for this to return true:\\n     * 1. The time interval has passed between raffle runs.\\n     * 2. The lottery is open.\\n     * 3. The contract has ETH.\\n     * 4. Implicity, your subscription is funded with LINK.\\n     */\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        external view\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = LotteryState.OPEN == s_lotteryState;\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (timePassed && isOpen && hasBalance && hasPlayers);\\n        return (upkeepNeeded, \\\"0x0\\\"); // can we comment this out?\\n    }\\n\\n    /**\\n     * @dev Once `checkUpkeep` is returning `true`, this function is called\\n     * and it kicks off a Chainlink VRF call to get a random winner.\\n     */\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external {\\n         s_lotteryState = LotteryState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gaslane,\\n            i_subscriptionId,\\n            REQUEST_CONFORMATIONS,\\n            i_callbackGaslimit,\\n            NUM_WORDS\\n        );emit RequestedRaffleWinner(requestId);\\n    }\\n\\n\\n\\n    /* function pickWinner() public payable restricted returns (uint) {\\n        uint index = random() % players.length;\\n        players[index].transfer(address(this).balance);\\n        players = new address payable[](0);\\n        return (index);\\n    } */\\n\\n    //The function pickWinner is replaced by performUpKeep()\\n    \\n\\n    function getPlayers() public view returns (address payable[] memory) {\\n        return players;\\n    }\\n    function getlotteryState() public view returns (LotteryState) {\\n        return s_lotteryState;\\n    }\\n\\n    function getNumWords() public pure returns (uint256) {\\n        return NUM_WORDS;\\n    }\\n\\n    function getRequestConfirmations() public pure returns (uint256) {\\n        return REQUEST_CONFORMATIONS;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return players[index];\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256) {\\n        return s_lastTimeStamp;\\n    }\\n\\n    function getInterval() public view returns (uint256) {\\n        return i_interval;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256) {\\n        return players.length;\\n    }\\n\\n}\\n\",\"keccak256\":\"0x75e36b974eacd98ad9e0983a0b8a64835d2aef4df68b37386cf5e5e1e3efb876\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b506040516200193a3803806200193a833981810160405281019062000038919062000295565b848073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505050336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508163ffffffff166101008163ffffffff16815250508473ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250508060a0818152505050505050506200031d565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001618262000134565b9050919050565b620001738162000154565b81146200017f57600080fd5b50565b600081519050620001938162000168565b92915050565b6000819050919050565b620001ae8162000199565b8114620001ba57600080fd5b50565b600081519050620001ce81620001a3565b92915050565b600067ffffffffffffffff82169050919050565b620001f381620001d4565b8114620001ff57600080fd5b50565b6000815190506200021381620001e8565b92915050565b600063ffffffff82169050919050565b620002348162000219565b81146200024057600080fd5b50565b600081519050620002548162000229565b92915050565b6000819050919050565b6200026f816200025a565b81146200027b57600080fd5b50565b6000815190506200028f8162000264565b92915050565b600080600080600060a08688031215620002b457620002b36200012f565b5b6000620002c48882890162000182565b9550506020620002d788828901620001bd565b9450506040620002ea8882890162000202565b9350506060620002fd8882890162000243565b925050608062000310888289016200027e565b9150509295509295909350565b60805160a05160c05160e05161010051610120516115bf6200037b600039600061048a0152600061050a015260006104e7015260006104c601526000818161067901526107b001526000818161038601526103da01526115bf6000f3fe6080604052600436106100e85760003560e01c80636e04ff0d1161008a578063e55ae4e811610059578063e55ae4e8146102d5578063e97dcb6214610312578063f71d96cb1461031c578063fd6673f514610359576100e8565b80636e04ff0d146102165780638b5b9ccc1461025457806391ad27b41461027f578063c1c244e8146102aa576100e8565b8063473f1ddc116100c6578063473f1ddc1461016a578063481c6a751461019557806353a2c19a146101c05780635f1b0fd8146101eb576100e8565b80631fe543e3146100ed57806329c0d4fc146101165780634585e33b14610141575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610dee565b610384565b005b34801561012257600080fd5b5061012b610444565b6040516101389190610ec1565b60405180910390f35b34801561014d57600080fd5b5061016860048036038101906101639190610f37565b61045b565b005b34801561017657600080fd5b5061017f6105cc565b60405161018c9190610fc5565b60405180910390f35b3480156101a157600080fd5b506101aa6105f6565b6040516101b79190610fc5565b60405180910390f35b3480156101cc57600080fd5b506101d561061a565b6040516101e29190610fef565b60405180910390f35b3480156101f757600080fd5b50610200610629565b60405161020d9190610fef565b60405180910390f35b34801561022257600080fd5b5061023d600480360381019061023891906110bf565b610636565b60405161024b9291906111a2565b60405180910390f35b34801561026057600080fd5b5061026961071e565b60405161027691906112a2565b60405180910390f35b34801561028b57600080fd5b506102946107ac565b6040516102a19190610fef565b60405180910390f35b3480156102b657600080fd5b506102bf6107d4565b6040516102cc9190610fef565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f791906112c4565b6107de565b6040516103099190610fc5565b60405180910390f35b61031a610826565b005b34801561032857600080fd5b50610343600480360381019061033e91906112c4565b6108e1565b6040516103509190611300565b60405180910390f35b34801561036557600080fd5b5061036e610920565b60405161037b9190610fef565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042d92919061131b565b60405180910390fd5b610440828261092d565b5050565b6000600260149054906101000a900460ff16905090565b6001600260146101000a81548160ff0219169083600181111561048157610480610e4a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161054b9594939291906113bc565b6020604051808303816000875af115801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190611424565b90507fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b816040516105bf9190610fef565b60405180910390a1505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff16600181111561065e5761065d610e4a565b5b6000600181111561067257610671610e4a565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426106a69190611480565b119050600080600180549050119050600080471190508280156106c65750835b80156106cf5750805b80156106d85750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b606060018054806020026020016040519081016040528092919081815260200182805480156107a257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610758575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b6000600182815481106107f4576107f36114b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b66038d7ea4c68000341161083957600080fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b600181815481106108f157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600180549050905090565b600060018054905082600081518110610949576109486114b4565b5b602002602001015161095b9190611512565b9050600060018281548110610973576109726114b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109fc576109fb610cab565b5b604051908082528060200260200182016040528015610a2a5781602001602082028036833780820191505090505b5060019080519060200190610a40929190610ba4565b506000600260146101000a81548160ff02191690836001811115610a6757610a66610e4a565b5b0217905550426003819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610abb90611574565b60006040518083038185875af1925050503d8060008114610af8576040519150601f19603f3d011682016040523d82523d6000602084013e610afd565b606091505b5050905080610b38576040517fb321456900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c1d579160200282015b82811115610c1c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bc4565b5b509050610c2a9190610c2e565b5090565b5b80821115610c47576000816000905550600101610c2f565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c7281610c5f565b8114610c7d57600080fd5b50565b600081359050610c8f81610c69565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ce382610c9a565b810181811067ffffffffffffffff82111715610d0257610d01610cab565b5b80604052505050565b6000610d15610c4b565b9050610d218282610cda565b919050565b600067ffffffffffffffff821115610d4157610d40610cab565b5b602082029050602081019050919050565b600080fd5b6000610d6a610d6584610d26565b610d0b565b90508083825260208201905060208402830185811115610d8d57610d8c610d52565b5b835b81811015610db65780610da28882610c80565b845260208401935050602081019050610d8f565b5050509392505050565b600082601f830112610dd557610dd4610c95565b5b8135610de5848260208601610d57565b91505092915050565b60008060408385031215610e0557610e04610c55565b5b6000610e1385828601610c80565b925050602083013567ffffffffffffffff811115610e3457610e33610c5a565b5b610e4085828601610dc0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e8a57610e89610e4a565b5b50565b6000819050610e9b82610e79565b919050565b6000610eab82610e8d565b9050919050565b610ebb81610ea0565b82525050565b6000602082019050610ed66000830184610eb2565b92915050565b600080fd5b60008083601f840112610ef757610ef6610c95565b5b8235905067ffffffffffffffff811115610f1457610f13610edc565b5b602083019150836001820283011115610f3057610f2f610d52565b5b9250929050565b60008060208385031215610f4e57610f4d610c55565b5b600083013567ffffffffffffffff811115610f6c57610f6b610c5a565b5b610f7885828601610ee1565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610faf82610f84565b9050919050565b610fbf81610fa4565b82525050565b6000602082019050610fda6000830184610fb6565b92915050565b610fe981610c5f565b82525050565b60006020820190506110046000830184610fe0565b92915050565b600080fd5b600067ffffffffffffffff82111561102a57611029610cab565b5b61103382610c9a565b9050602081019050919050565b82818337600083830152505050565b600061106261105d8461100f565b610d0b565b90508281526020810184848401111561107e5761107d61100a565b5b611089848285611040565b509392505050565b600082601f8301126110a6576110a5610c95565b5b81356110b684826020860161104f565b91505092915050565b6000602082840312156110d5576110d4610c55565b5b600082013567ffffffffffffffff8111156110f3576110f2610c5a565b5b6110ff84828501611091565b91505092915050565b60008115159050919050565b61111d81611108565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561115d578082015181840152602081019050611142565b60008484015250505050565b600061117482611123565b61117e818561112e565b935061118e81856020860161113f565b61119781610c9a565b840191505092915050565b60006040820190506111b76000830185611114565b81810360208301526111c98184611169565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061120982610f84565b9050919050565b611219816111fe565b82525050565b600061122b8383611210565b60208301905092915050565b6000602082019050919050565b600061124f826111d2565b61125981856111dd565b9350611264836111ee565b8060005b8381101561129557815161127c888261121f565b975061128783611237565b925050600181019050611268565b5085935050505092915050565b600060208201905081810360008301526112bc8184611244565b905092915050565b6000602082840312156112da576112d9610c55565b5b60006112e884828501610c80565b91505092915050565b6112fa816111fe565b82525050565b600060208201905061131560008301846112f1565b92915050565b60006040820190506113306000830185610fb6565b61133d6020830184610fb6565b9392505050565b6000819050919050565b61135781611344565b82525050565b600067ffffffffffffffff82169050919050565b61137a8161135d565b82525050565b600061ffff82169050919050565b61139781611380565b82525050565b600063ffffffff82169050919050565b6113b68161139d565b82525050565b600060a0820190506113d1600083018861134e565b6113de6020830187611371565b6113eb604083018661138e565b6113f860608301856113ad565b61140560808301846113ad565b9695505050505050565b60008151905061141e81610c69565b92915050565b60006020828403121561143a57611439610c55565b5b60006114488482850161140f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061148b82610c5f565b915061149683610c5f565b92508282039050818111156114ae576114ad611451565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061151d82610c5f565b915061152883610c5f565b925082611538576115376114e3565b5b828206905092915050565b600081905092915050565b50565b600061155e600083611543565b91506115698261154e565b600082019050919050565b600061157f82611551565b915081905091905056fea2646970667358221220d014025388366db6b56be5181fc1ae17bff39ed215689bf622a506239fdcdad164736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c80636e04ff0d1161008a578063e55ae4e811610059578063e55ae4e8146102d5578063e97dcb6214610312578063f71d96cb1461031c578063fd6673f514610359576100e8565b80636e04ff0d146102165780638b5b9ccc1461025457806391ad27b41461027f578063c1c244e8146102aa576100e8565b8063473f1ddc116100c6578063473f1ddc1461016a578063481c6a751461019557806353a2c19a146101c05780635f1b0fd8146101eb576100e8565b80631fe543e3146100ed57806329c0d4fc146101165780634585e33b14610141575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610dee565b610384565b005b34801561012257600080fd5b5061012b610444565b6040516101389190610ec1565b60405180910390f35b34801561014d57600080fd5b5061016860048036038101906101639190610f37565b61045b565b005b34801561017657600080fd5b5061017f6105cc565b60405161018c9190610fc5565b60405180910390f35b3480156101a157600080fd5b506101aa6105f6565b6040516101b79190610fc5565b60405180910390f35b3480156101cc57600080fd5b506101d561061a565b6040516101e29190610fef565b60405180910390f35b3480156101f757600080fd5b50610200610629565b60405161020d9190610fef565b60405180910390f35b34801561022257600080fd5b5061023d600480360381019061023891906110bf565b610636565b60405161024b9291906111a2565b60405180910390f35b34801561026057600080fd5b5061026961071e565b60405161027691906112a2565b60405180910390f35b34801561028b57600080fd5b506102946107ac565b6040516102a19190610fef565b60405180910390f35b3480156102b657600080fd5b506102bf6107d4565b6040516102cc9190610fef565b60405180910390f35b3480156102e157600080fd5b506102fc60048036038101906102f791906112c4565b6107de565b6040516103099190610fc5565b60405180910390f35b61031a610826565b005b34801561032857600080fd5b50610343600480360381019061033e91906112c4565b6108e1565b6040516103509190611300565b60405180910390f35b34801561036557600080fd5b5061036e610920565b60405161037b9190610fef565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461043657337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161042d92919061131b565b60405180910390fd5b610440828261092d565b5050565b6000600260149054906101000a900460ff16905090565b6001600260146101000a81548160ff0219169083600181111561048157610480610e4a565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161054b9594939291906113bc565b6020604051808303816000875af115801561056a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061058e9190611424565b90507fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b816040516105bf9190610fef565b60405180910390a1505050565b6000600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600260149054906101000a900460ff16600181111561065e5761065d610e4a565b5b6000600181111561067257610671610e4a565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600354426106a69190611480565b119050600080600180549050119050600080471190508280156106c65750835b80156106cf5750805b80156106d85750815b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b606060018054806020026020016040519081016040528092919081815260200182805480156107a257602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610758575b5050505050905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600354905090565b6000600182815481106107f4576107f36114b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b66038d7ea4c68000341161083957600080fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167fde7ffaf8976e3b39d4fb74cd196ccae530bbcc6539e8f8e5db2cc61ef21b9ac260405160405180910390a2565b600181815481106108f157600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000600180549050905090565b600060018054905082600081518110610949576109486114b4565b5b602002602001015161095b9190611512565b9050600060018281548110610973576109726114b4565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109fc576109fb610cab565b5b604051908082528060200260200182016040528015610a2a5781602001602082028036833780820191505090505b5060019080519060200190610a40929190610ba4565b506000600260146101000a81548160ff02191690836001811115610a6757610a66610e4a565b5b0217905550426003819055506000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1647604051610abb90611574565b60006040518083038185875af1925050503d8060008114610af8576040519150601f19603f3d011682016040523d82523d6000602084013e610afd565b606091505b5050905080610b38576040517fb321456900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610c1d579160200282015b82811115610c1c5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610bc4565b5b509050610c2a9190610c2e565b5090565b5b80821115610c47576000816000905550600101610c2f565b5090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c7281610c5f565b8114610c7d57600080fd5b50565b600081359050610c8f81610c69565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610ce382610c9a565b810181811067ffffffffffffffff82111715610d0257610d01610cab565b5b80604052505050565b6000610d15610c4b565b9050610d218282610cda565b919050565b600067ffffffffffffffff821115610d4157610d40610cab565b5b602082029050602081019050919050565b600080fd5b6000610d6a610d6584610d26565b610d0b565b90508083825260208201905060208402830185811115610d8d57610d8c610d52565b5b835b81811015610db65780610da28882610c80565b845260208401935050602081019050610d8f565b5050509392505050565b600082601f830112610dd557610dd4610c95565b5b8135610de5848260208601610d57565b91505092915050565b60008060408385031215610e0557610e04610c55565b5b6000610e1385828601610c80565b925050602083013567ffffffffffffffff811115610e3457610e33610c5a565b5b610e4085828601610dc0565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610e8a57610e89610e4a565b5b50565b6000819050610e9b82610e79565b919050565b6000610eab82610e8d565b9050919050565b610ebb81610ea0565b82525050565b6000602082019050610ed66000830184610eb2565b92915050565b600080fd5b60008083601f840112610ef757610ef6610c95565b5b8235905067ffffffffffffffff811115610f1457610f13610edc565b5b602083019150836001820283011115610f3057610f2f610d52565b5b9250929050565b60008060208385031215610f4e57610f4d610c55565b5b600083013567ffffffffffffffff811115610f6c57610f6b610c5a565b5b610f7885828601610ee1565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610faf82610f84565b9050919050565b610fbf81610fa4565b82525050565b6000602082019050610fda6000830184610fb6565b92915050565b610fe981610c5f565b82525050565b60006020820190506110046000830184610fe0565b92915050565b600080fd5b600067ffffffffffffffff82111561102a57611029610cab565b5b61103382610c9a565b9050602081019050919050565b82818337600083830152505050565b600061106261105d8461100f565b610d0b565b90508281526020810184848401111561107e5761107d61100a565b5b611089848285611040565b509392505050565b600082601f8301126110a6576110a5610c95565b5b81356110b684826020860161104f565b91505092915050565b6000602082840312156110d5576110d4610c55565b5b600082013567ffffffffffffffff8111156110f3576110f2610c5a565b5b6110ff84828501611091565b91505092915050565b60008115159050919050565b61111d81611108565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561115d578082015181840152602081019050611142565b60008484015250505050565b600061117482611123565b61117e818561112e565b935061118e81856020860161113f565b61119781610c9a565b840191505092915050565b60006040820190506111b76000830185611114565b81810360208301526111c98184611169565b90509392505050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600061120982610f84565b9050919050565b611219816111fe565b82525050565b600061122b8383611210565b60208301905092915050565b6000602082019050919050565b600061124f826111d2565b61125981856111dd565b9350611264836111ee565b8060005b8381101561129557815161127c888261121f565b975061128783611237565b925050600181019050611268565b5085935050505092915050565b600060208201905081810360008301526112bc8184611244565b905092915050565b6000602082840312156112da576112d9610c55565b5b60006112e884828501610c80565b91505092915050565b6112fa816111fe565b82525050565b600060208201905061131560008301846112f1565b92915050565b60006040820190506113306000830185610fb6565b61133d6020830184610fb6565b9392505050565b6000819050919050565b61135781611344565b82525050565b600067ffffffffffffffff82169050919050565b61137a8161135d565b82525050565b600061ffff82169050919050565b61139781611380565b82525050565b600063ffffffff82169050919050565b6113b68161139d565b82525050565b600060a0820190506113d1600083018861134e565b6113de6020830187611371565b6113eb604083018661138e565b6113f860608301856113ad565b61140560808301846113ad565b9695505050505050565b60008151905061141e81610c69565b92915050565b60006020828403121561143a57611439610c55565b5b60006114488482850161140f565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061148b82610c5f565b915061149683610c5f565b92508282039050818111156114ae576114ad611451565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061151d82610c5f565b915061152883610c5f565b925082611538576115376114e3565b5b828206905092915050565b600081905092915050565b50565b600061155e600083611543565b91506115698261154e565b600082019050919050565b600061157f82611551565b915081905091905056fea2646970667358221220d014025388366db6b56be5181fc1ae17bff39ed215689bf622a506239fdcdad164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "This is the function that the Chainlink Keeper nodes call they look for `upkeepNeeded` to return True. the following should be true for this to return true: 1. The time interval has passed between raffle runs. 2. The lottery is open. 3. The contract has ETH. 4. Implicity, your subscription is funded with LINK."
      },
      "performUpkeep(bytes)": {
        "details": "Once `checkUpkeep` is returning `true`, this function is called and it kicks off a Chainlink VRF call to get a random winner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 236,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "manager",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 239,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 241,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "recent_winner",
        "offset": 0,
        "slot": "2",
        "type": "t_address_payable"
      },
      {
        "astId": 244,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lotteryState",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(LotteryState)234"
      },
      {
        "astId": 246,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 248,
        "contract": "contracts/Lottery.sol:Lottery",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(LotteryState)234": {
        "encoding": "inplace",
        "label": "enum Lottery.LotteryState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}